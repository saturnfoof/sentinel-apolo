const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const db = require("./database/db");

module.exports = {
  name: "modstats",
  async execute(message, args, client) {
    const user = message.mentions.users.first() || client.users.cache.get(args[0]);
    if (!user) return message.reply("Mencione um staff ou forneça um ID.");

    db.all(
      `SELECT * FROM modlogs WHERE moderator_id = ? AND guild_id = ? ORDER BY date DESC`,
      [user.id, message.guild.id],
      async (err, rows) => {
        if (err) {
          console.error(err);
          return message.reply("Erro ao acessar os dados.");
        }

        if (!rows.length) return message.reply("Este moderador não aplicou nenhuma punição.");

        const contagem = {};
        for (const r of rows) {
          contagem[r.type] = (contagem[r.type] || 0) + 1;
        }

        const puniçõesPorPágina = 4;
        const totalPáginas = Math.ceil(rows.length / puniçõesPorPágina);

        let páginaAtual = 0;

        const gerarEmbed = (página) => {
          const início = página * puniçõesPorPágina;
          const punições = rows.slice(início, início + puniçõesPorPágina);

          const embed = new EmbedBuilder()
            .setTitle(`<:estatistica:1358845162620584302> Modstats de ${user.tag} (${user.id})`)
            .setThumbnail(user.displayAvatarURL({ dynamic: true }))
            .setColor("Purple")
            .addFields(
              { name: "<:escudo2:1358845900298125382> Total de punições", value: `${rows.length}`, inline: true },
              { name: "<:gray_tempo:1358519332384276551> Último comando", value: `<t:${Math.floor(new Date(rows[0].date).getTime() / 1000)}:R>`, inline: true },
              { name: "<:lista:1358845681086759042> Página", value: `${página + 1}/${totalPáginas}`, inline: true },
            );

          const detalhes = punições.map(punicao => {
            const timestamp = Math.floor(new Date(punicao.date).getTime() / 1000);
            return `**${punicao.type}** para <@${punicao.user_id}> - <t:${timestamp}:f>
<:caderninho:1358846679000023143> Motivo: ${punicao.reason.length > 80 ? punicao.reason.slice(0, 80) + "..." : punicao.reason}`;
          }).join("\n\n");

          embed.addFields({ name: "<:lista:1358845681086759042> Últimas punições aplicadas", value: detalhes });
          return embed;
        };

        const botões = (desabilitarAnterior, desabilitarPróximo) => new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("anterior")
            .setEmoji("⬅️")
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(desabilitarAnterior),
          new ButtonBuilder()
            .setCustomId("proximo")
            .setEmoji("➡️")
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(desabilitarPróximo)
        );

        const msg = await message.channel.send({
          embeds: [gerarEmbed(páginaAtual)],
          components: [botões(true, totalPáginas <= 1)]
        });

        const collector = msg.createMessageComponentCollector({
          time: 60000,
          filter: i => i.user.id === message.author.id
        });

        collector.on("collect", async i => {
          if (i.customId === "anterior" && páginaAtual > 0) páginaAtual--;
          else if (i.customId === "proximo" && páginaAtual < totalPáginas - 1) páginaAtual++;

          await i.update({
            embeds: [gerarEmbed(páginaAtual)],
            components: [botões(páginaAtual === 0, páginaAtual === totalPáginas - 1)]
          });
        });

        collector.on("end", () => {
          msg.edit({ components: [] }).catch(() => {});
        });
      }
    );
  }
};
